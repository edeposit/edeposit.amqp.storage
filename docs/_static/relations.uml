package edeposit.amqp.storage {
    package structures {
        package comm {
            class publication as "publication.py" <<M, Green>> {
                Stucture for use
                in AMQP communication.
                ---
                class Publication
            }
            class archive as "archive.py" <<M, Green>> {
                Stucture for use
                in AMQP communication.
                ---
                class Archive
            }
            class tree as "tree.py" <<M, Green>> {
                Stucture for use
                in AMQP communication.
                ---
                class Tree
            }
            class requests as "requests.py" <<M, Green>> {
                AMQP requests.
                ---
                class SearchRequest
                class SaveRequest
            }
            class responses as "responses.py" <<M, Green>> {
                AMQP resposes.
                ---
                class SearchResult
                class TreeInfo
            }
            class comm_init as "_​_init__.py" <<M, Green>> {
                Imports all structures to make
                them accessible at package level.
                ---
            }

            publication -d-> comm_init
            archive -d-> comm_init
            tree -d-> comm_init
            requests -d-> comm_init
            responses -d-> comm_init
        }
        package db {
            class db_publication as "db_publication.py" <<M, Green>> {
                Structure for use in
                ZODB.
                ---
                class DBPublication
            }
            class db_archive as "db_archive.py" <<M, Green>> {
                Structure for use in
                ZODB.
                ---
                class DBArchive
            }
            class db_init as "_​_init__.py" <<M, Green>> {
                Imports all structures to make
                them accessible at package level.
                ---
            }

            db_publication -d-> db_init
            db_archive -d-> db_init
        }
        class structures_generator as "structures_generator.py" <<S, Blue>> {
            Script used to generate both
            Publication and DBPublication
            structures.
            ---
        }
        class struct_init as "_​_init__.py" <<M, Green>> {
            Imports all structures to make
            them accessible at package level.
            ---
        }

        comm_init -d-> struct_init
        db_init -d-> struct_init

        structures_generator .d.> archive: generates
        structures_generator .d.> publication: generates
        structures_generator .d.> db_archive: generates
        structures_generator .d.> db_publication: generates
    }

    class init as "_​_init__.py" <<M, Green>> {
        AMQP connector.

        Also all communication structures are imported
        here.
        ---
        class Publication
        class SaveRequest
        class SearchResult
        class SearchRequest
            reactToAMQPMessage(message, send_back)
            class HNASNotMountedException
    }
    class storage_handler as "storage_handler.py" <<M, Green>> {
        Saves objects to
        database, maintains
        search indexes and so
        on.
        ---
        class InvalidType
        class UnindexableObject
        class StorageHandler
    }
    class tree_handler as "tree_handler.py" <<M, Green>> {
        Tree database handler.
        ---
        tree_handler()
        class TreeHandler
    }
    class archive_storage as "archive_storage.py" <<M, Green>> {
        Saves DBArchive to
        the database using
        storage_handler.
        ---
        save_archive(archive)
        search_archives(query)
    }
    class publication_storage as "publication_storage.py" <<M, Green>> {
        Saves DBPublication to
        the database using
        storage_handler.
        ---
        save_publication(pub)
        search_pubs_by_uuid(uuid)
        search_publications(query)
    }
    class web_tools as "web_tools.py" <<M, Green>> {
        Shared functions for url
        composition.
        ---
        compose_path(pub, uuid_url)
        compose_tree_path(tree, issn)
        compose_full_url(pub, uuid_url)
        compose_tree_url(tree, issn_url)
        class PrivatePublicationError
    }
    class settings as "settings.py" <<M, Green>> {
        Settings for the package - web
        address and so on.
        ---
        .ZCONF_PATH
        .PROJECT_KEY
        .PRIVATE_INDEX
        .PRIVATE_INDEX_USERNAME
        .PRIVATE_INDEX_PASSWORD
        .PUBLIC_DIR
        .PRIVATE_DIR
        .WEB_ADDR
        .WEB_PORT
        .WEB_SERVER
        .WEB_DB_TIMEOUT
    }
    struct_init -d-> init

    settings -d-> storage_handler
    settings -d-> tree_handler
    settings -d-> init

    storage_handler -d-> archive_storage: wraps
    storage_handler -d-> publication_storage: wraps

    tree_handler -d-> init
    archive_storage -d-> init
    publication_storage -d-> init
}

package bin {
    class runzeo as "edeposit_storage_runzeo.sh" <<S, Blue>> {
        Used to run ZEO server (database
        server).
    }
    class server as "edeposit_storage_server.py" <<S, Blue>> {
        Web interface for the publicly
        accessible publications in database.
    }
}
init -d-> server
web_tools -r> init
web_tools --> server
settings -d-> server
settings -d-> runzeo