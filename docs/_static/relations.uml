package edeposit.amqp.storage {
    package structures {
        class struct_init as "_​_init__.py" <<M, Green>> {
            Imports all structures to be
            accessible at package level.
            ---
        }
        class publication as "publication.py" <<M, Green>> {
            Stucture for use
            in AMQP communication.
            ---
            class Publication
        }
        class db_publication as "db_publication.py" <<M, Green>> {
            Structure for use in
            database.
            ---
            class DBPublication
        }
        class requests as "requests.py" <<M, Green>> {
            AMQP requests.
            ---
            class SearchRequest
            class SaveRequest
        }
        class responses as "responses.py" <<M, Green>> {
            AMQP resposes.
            ---
            class SearchResult
        }
        class publication_generator as "publication_generator.py" <<S, Blue>> {
            Script used to generate both
            Publication and DBPublication
            structures.
            ---
            generate_communication()
            generate_database()
            generate_structures()
        }
    }
    publication -d-> struct_init
    db_publication -d-> struct_init
    requests -d-> struct_init
    responses -d-> struct_init

    publication_generator .d.> publication: generates
    publication_generator .d.> db_publication: generates


    package zconf {
        class zinit as "_​_init__.py" <<M, Green>> {
            ZODB connector.
            ---
            use_new_connection()
            cached_connection(fn, timeout)
            get_zeo_connection(cached, on_close_callback)
            get_zeo_root(cached)
            get_zeo_key(key, new_type, cached)
        }
        class zeo as "zeo.conf" <<F, Red>> {
            Default ZODB / ZEO
            configuration file.
        }
        class zeo_client as "zeo_client.conf" <<F, Red>> {
            Default config for
            the ZEO client.
        }
    }
    zeo -d-> zinit
    zeo_client -d-> zinit


    class init as "_​_init__.py" <<M, Green>> {
        AMQP connector.

        Also all communication structures are imported
        here.
        ---
        class Publication
        class SaveRequest
        class SearchResult
        class SearchRequest
            reactToAMQPMessage(message, send_back)
    }
    class storage_handler as "storage_handler.py" <<M, Green>> {
        Saves DBPublication to
        database, maintains
        search indexes and so
        on.
        ---
        save_publication(pub)
        search_publications(query)
        class InvalidType
        class UnindexablePublication
    }
    class web_tools as "web_tools.py" <<M, Green>> {
        Shared functions for url
        composition.
        ---
        compose_url(pub, uuid_url)
        compose_full_url(pub, uuid_url)
        class PrivatePublicationError
    }
    class settings as "settings.py" <<M, Green>> {
        Settings for the package - web
        address and so on.
        ---
        .ZCONF_PATH
        .PROJECT_KEY
        .PRIVATE_INDEX
        .PRIVATE_INDEX_USERNAME
        .PRIVATE_INDEX_PASSWORD
        .PUBLIC_DIR
        .PRIVATE_DIR
        .WEB_ADDR
        .WEB_PORT
        .WEB_SERVER
        .WEB_DB_TIMEOUT
    }
    struct_init -d-> init
    zinit -d-> storage_handler

    settings -r> storage_handler
    settings -d-> init
    storage_handler -d-> init
}

package bin {
    class runzeo as "edeposit_storage_runzeo.sh" <<S, Blue>> {
        Used to run ZEO server (database
        server).
    }
    class server as "edeposit_storage_server.py" <<S, Blue>> {
        Web interface for the publicly
        accessible publications in database.
    }
}
init -d-> server
web_tools -r> init
web_tools --> server
settings -d-> server
settings -d-> runzeo