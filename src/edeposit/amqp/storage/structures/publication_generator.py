#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Interpreter version: python 2.7
#
# Imports =====================================================================
from string import Template


# Variables ===================================================================
CLASS_NAME = "Publication"

COMMON_FIELDS = [
    ["title", "(str): Title of the publication."],
    ["author", "(str): Name of the author."],
    ["pub_year", "(str): Year when the publication was released."],
    ["isbn", "(str): ISBN for the publication."],
    ["urnnbn", "(str): URN:NBN for the publication."],
    ["uuid", "(str): UUID string to pair the publication with edeposit."],
    ["is_public", "(bool): Is the file public?"],
    ["format", "(str): Mime for the format."],
]

COMMUNICATION_FIELDS = [
    ["b64_data", "(str): Base64 encoded data ebook file."],
]

DATABASE_FIELDS = [
    ["file_pointer", "(str): Pointer to the file on the file server."],
]

TEMPLATE = """#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Interpreter version: python 2.7
#
# !!! DO NOT EDIT THIS FILE - THIS IS GENERATED FILE !!!
# Imports =====================================================================
$imports


# Functions and classes =======================================================

# !!! DO NOT EDIT THIS FILE - THIS IS GENERATED FILE !!!
# !!! DO NOT EDIT THIS FILE - THIS IS GENERATED FILE !!!
$classes
# !!! DO NOT EDIT THIS FILE - THIS IS GENERATED FILE !!!
# !!! DO NOT EDIT THIS FILE - THIS IS GENERATED FILE !!!
"""

COMMUNICATION_STRUCTURE = """
fields = [
    $fields
]


class $class_name(namedtuple('$class_name', fields)):
    '''
    Communication structure used to sent data to `storage` subsystem over AMQP.

    Attributes:
        $docstring_fields
    '''
"""


DATABASE_STRUCTURE = """
class $class_name(Persistent):
    '''
    Database structure used to store basic metadata about Publications.

    Attributes:
        $docstring_fields
    '''
    def __init__(self):
        $fields
"""


# Functions & classes =========================================================
def _get_docstring_fields(fields):
    return "\n        ".join(
        name + " " + description
        for name, description in fields
    )


def generate_communication():
    fields = "\n    ".join(
        '"%s",' % name
        for name, x in COMMON_FIELDS + COMMUNICATION_FIELDS
    )

    return Template(COMMUNICATION_STRUCTURE).substitute(
        fields=fields,
        class_name=CLASS_NAME,
        docstring_fields=_get_docstring_fields(
            COMMON_FIELDS + COMMUNICATION_FIELDS
        )
    )


def generate_database():
    fields = "        ".join(
        "self.%s = None\n" % name
        for name, x in COMMON_FIELDS + DATABASE_FIELDS
    )

    return Template(DATABASE_STRUCTURE).substitute(
        fields=fields,
        class_name="DB" + CLASS_NAME,
        docstring_fields=_get_docstring_fields(
            COMMON_FIELDS + DATABASE_FIELDS
        )
    )


def generate_structures():
    with open("publication.py", "w") as f:
        f.write(
            Template(TEMPLATE).substitute(
                imports="from collections import namedtuple",
                classes=generate_communication()
            )
        )

    with open("db_publication.py", "w") as f:
        f.write(
            Template(TEMPLATE).substitute(
                imports="from persistent import Persistent",
                classes=generate_database()
            )
        )


# Main program ================================================================
if __name__ == '__main__':
    generate_structures()
